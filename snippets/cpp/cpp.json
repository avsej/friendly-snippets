{
    "Starter Template": {
        "prefix": "st",
        "body": [
            "#include <format>",
            "",
            "auto main(int argc, char *argv[]) -> int",
            "{",
            "  $1",
            "  return 0;",
            "}"
        ],
        "description": "Standard starter template for a tiny C++ program"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (${1:std::size_t} ${2:i} = ${3:0}; $2 < ${4:length}; ++$2) {",
            "  $0",
            "}"
        ],
        "description": "Code snippet for 'for' loop"
    },
    "forr": {
        "prefix": "forr",
        "body": [
            "for (${1:std::size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; --$2) {",
            "  $0",
            "}"
        ],
        "description": "Code snippet for reverse 'for' loop"
    },
    "do": {
        "prefix": "do",
        "body": ["do {", "  $0", "} while($1);"],
        "description": "Code snippet for do...while loop"
    },
    "while": {
        "prefix": "while",
        "body": ["while ($1) {", "  $0", "}"],
        "description": "'while' loop snippet"
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "for(${1:auto} ${2:var} : ${3:collection_to_loop}) {",
            "  $0",
            "}"
        ],
        "description": "Code snippet for range-based for loop (c++11) statement"
    },
    "if": {
        "prefix": "if",
        "body": ["if ($1) {", "  $0", "}"],
        "description": "Code snippet for if statement"
    },
    "else": {
        "prefix": "else",
        "body": ["else {", "  $0", "}"],
        "description": "Code snippet for else statement"
    },
    "else if": {
        "prefix": "else if",
        "body": ["else if ($1) {", "  $0", "}"],
        "description": "Code snippet for else-if statement"
    },
    "enum": {
        "prefix": "enum",
        "body": ["enum class ${1:MyEnum} {", "  $0", "};"],
        "description": "Code snippet for enum"
    },
    "class": {
        "prefix": "class",
        "body": [
            "class ${1:my_class}",
            "{",
            "public:",
            "  $1();",
            "  $1($1&&) = default;",
            "  $1(const $1&) = default;",
            "  auto operator=($1&&) -> $1& = default;",
            "  auto operator=(const $1&) -> $1& = default;",
            "  ~$1();",
            "",
            "private:",
            "  $2",
            "};",
            "",
            "$1::$1() {",
            "}",
            "",
            "$1::~$1() {",
            "}",
            ""
        ],
        "description": "Code snippet for class"
    },
    "eclass": {
        "prefix": "eclass",
        "body": [
            "class ${1:my_class}",
            "{",
            "public:",
            "  $2",
            "private:",
            "  $3",
            "};",
            ""
        ],
        "description": "Code snippet for empty class"
    },
    "classi": {
        "prefix": "classi",
        "body": [
            "class ${1:MyClass} {",
            "public:",
            "  $1() = default;",
            "  $1($1&&) = default;",
            "  $1(const $1&) = default;",
            "  auto operator=($1&&) -> $1& = default;",
            "  auto operator=(const $1&) -> $1& = default;",
            "  ~$1() = default;",
            "",
            "private:",
            "  $2",
            "};"
        ],
        "description": "Code snippet for class with inline constructor/destructor"
    },
    "namespace": {
        "prefix": "namespace",
        "body": [
            "namespace ${1:my_namespace}",
            "{",
            "  $0",
            "} // namespace $1"
        ]
    },
    "#ifdef": {
        "prefix": "#ifdef",
        "body": ["#ifdef ${1:DEBUG}", "$0", "#endif // $1"],
        "description": "Code snippet for #ifdef"
    },
    "#ifndef": {
        "prefix": "#ifndef",
        "body": ["#ifndef ${1:DEBUG}", "$0", "#endif // !$1"],
        "description": "Code snippet for #ifndef"
    },
    "#if": {
        "prefix": "#if",
        "body": ["#if ${1:0}", "$0", "#endif // $1"],
        "description": "Code snippet for #if"
    },
    "struct": {
        "prefix": "struct",
        "body": ["struct ${1:my_strict} {", "  $0", "};"],
        "description": "Code snippet for struct"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${1:switch_on}) {",
            "  default:",
            "    $0",
            "    break;",
            "}"
        ],
        "description": "Code snippet for switch statement"
    },
    "try": {
        "prefix": "try",
        "body": [
            "try {",
            "  $2",
            "}",
            "catch (${1:const std::exception&}) {",
            "}"
        ],
        "description": "Code snippet for try catch"
    },
    "union": {
        "prefix": "union",
        "body": ["union ${1:MyUnion} {", "  $0", "};"],
        "description": "Code snippet for union"
    },
    "cout": {
        "prefix": "cout",
        "body": ["std::cout << ${1:message};"],
        "description": "Code snippet for printing to std::cout, provided the header is set"
    },
    "cin": {
        "prefix": "cin",
        "body": ["std::cin >> $1;"],
        "description": "Code snippet for std::cin, provided the header is set"
    },
    "printf": {
        "prefix": "printf",
        "body": ["printf(\"$1\\n\"$0);"],
        "description": "Generic printf() snippet"
    },
    "sprintf": {
        "prefix": "sprintf",
        "body": ["sprintf($1, \"$2\\n\"$0);"],
        "description": "Generic sprintf() snippet"
    },
    "fprintf": {
        "prefix": "fprintf",
        "body": ["fprintf(${1:stderr}, \"$2\\n\"$0);"],
        "description": "Generic fprintf() snippet"
    },
    "scanf": {
        "prefix": "scanf",
        "body": ["scanf(\"$1\"$0);"],
        "description": "Generic scanf() snippet"
    },
    "sscanf": {
        "prefix": "sscanf",
        "body": ["sscanf($1, \"$2\"$0);"],
        "description": "Generic sscanf() snippet"
    },
    "fscanf": {
        "prefix": "fscanf",
        "body": ["fscanf($1, \"$2\"$0);"],
        "description": "Generic fscanf() snippet"
    },
    "#inc": {
        "prefix": "#inc",
        "body": ["#include \"$1\"$2"],
        "description": "Code snippet for #include \" \""
    },
    "#inc<": {
        "prefix": "#inc<",
        "body": ["#include <$1>$2"],
        "description": "Code snippet for #include < >"
    },
    "#def": {
        "prefix": "def",
        "body": ["#define $0"],
        "description": "Code snippet for #define \" \""
    },
    "Main function template": {
        "prefix": "main",
        "body": [
            "auto main(int argc, char *argv[]) -> int",
            "{",
            "  $1",
            "  return 0;",
            "}"
        ],
        "description": "A standard main function for a C++ program"
    },
    "#guard": {
      "prefix": "#guard",
      "body": [
        "#ifndef INCLUDE${TM_DIRECTORY/.*[\\/\\\\](.*)/_${1:/upcase}/}${TM_FILENAME_BASE/(.*)/_${1:/upcase}/}${TM_FILENAME/.*\\.(.*)/_${1:/upcase}/}_",
        "#define INCLUDE${TM_DIRECTORY/.*[\\/\\\\](.*)/_${1:/upcase}/}${TM_FILENAME_BASE/(.*)/_${1:/upcase}/}${TM_FILENAME/.*\\.(.*)/_${1:/upcase}/}_",
        "",
        "$0",
        "",
        "#endif  // INCLUDE${TM_DIRECTORY/.*[\\/\\\\](.*)/_${1:/upcase}/}${TM_FILENAME_BASE/(.*)/_${1:/upcase}/}${TM_FILENAME/.*\\.(.*)/_${1:/upcase}/}_"
      ],
      "description": "header guard. format :\n  INCLUDE_<dirname>_<filename>_<extension>_"
    },
    "sca": {
      "prefix": "sca",
      "body": [
        "static_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "static_cast<type>(expression)"
    },
    "dca": {
      "prefix": "dca",
      "body": [
        "dynamic_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "dynamic_cast<type>(expression)"
    },
    "rca": {
      "prefix": "rca",
      "body": [
        "reinterpret_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "reinterpret_cast<type>(expression)"
    },
    "cca": {
      "prefix": "cca",
      "body": [
        "const_cast<${1:unsigned}>(${2:expr})$3"
      ],
      "description": "const_cast<type>(expression)"
    },
    "af": {
      "prefix": "af",
      "body": [
        "auto ${1:name}(${2}) -> ${3:auto}",
        "{",
        "  ${4}",
        "}"
      ],
      "description": "auto function and trailing return"
    }
}
